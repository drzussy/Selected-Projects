// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=intype);

    And(a=instruction[15], b=instruction[5], out=Aloadpart);
    Not(in=instruction[15], out=Atype);
    Or(a=Aloadpart, b=Atype, out=Aload);
    ARegister(in=intype, load=Aload, out=Aout, out[0..14]=addressM);


    Mux16(a=Aout, b=inM, sel=instruction[12], out=y);
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=x);

    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10],
         zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=writeM);
    //And(a=instruction, b=instruction[5], out=writeM);
    

    And(a=true, b=instruction[2],out=j1);
    And(a=true, b=instruction[1],out=j2);
    And(a=true, b=instruction[0],out=j3);
    Not(in=instruction[2], out=notj1);
    Not(in=instruction[1], out=notj2);
    Not(in=instruction[0], out=notj3);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=zr, b=ng, out=zrandng);
    And(a=zr, b=notng, out=zrandnotng);
    And(a=notzr, b=ng, out=notzrandng);
    And(a=notzr, b=notng, out=notzrng);

    //greater than
    And(a=notj1,b=notj2,out=notj1j2);
    And(a=notj1j2,b=j3,out=greater);
    And(a=greater, b=notzrng, out=line1);
    
    //equel
    And(a=notj1, b=j2, out=notj1andj2);
    And(a=notj1andj2, b=notj3, out=equal);
    And(a=equal, b=zrandnotng, out=line2);

    //greater or equal
    And(a=notj1andj2, b=j3, out=greatequal);
    And(a=greatequal, b=notng, out=line3);

    //less than
    And(a=j1, b=notj2, out=j1andnotj2);
    And(a=j1andnotj2, b=notj3, out=lessthan);
    And(a=lessthan, b=notzrandng, out=line4);

    //notequel
    And(a=j1andnotj2, b=j3, out=notequal);
    And(a=notequal, b=notzr, out=line5);

    //lesser or equal
    And(a=j1, b=j2, out=j1andj2);
    And(a=j1andj2, b=notj3, out=lesserqual);
    Or(a=ng, b=zrandnotng, out=whatever);
    And(a=lesserqual, b=whatever, out=line6);

    //unconditional jump
    And(a=j1andj2, b=j3, out=line7);

    Or8Way(in[0]=line1, in[1]=line2, in[2]=line3, in[3]=line4, in[4]=line5, in[5]=line6, in[6]=line7, in[7]=false, out=goutput);

    And(a=instruction[15], b=goutput, out=loadpc);
    Not(in=loadpc, out=pcinc);
    PC(in=Aout, load=loadpc, inc=pcinc, reset=reset, out[0..14]=pc);
}