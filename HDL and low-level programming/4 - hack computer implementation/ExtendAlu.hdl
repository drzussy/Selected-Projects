// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     And(a=instruction[8], b=instruction[7], out=regularALU);
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4],
          zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUout, zr=ALUzr, ng=ALUng);

     ShiftRight(in=x, out=rightx);
     ShiftLeft(in=x, out=leftx);
     ShiftRight(in=y, out=righty);
     ShiftLeft(in=y, out=lefty);
     Mux4Way16(a=righty, b=rightx, c=lefty, d=leftx, 
          sel=instruction[4..5], out[0..7]=output07, out[8..14]=output814, out[15]=out15, out=shifted);

     Mux16(a=shifted, b=ALUout, sel=regularALU, out=out);

     Mux(a=false,b=true,sel=out15,out=shiftng);

     Or8Way(in=output07, out=or1);
     Or8Way(in[0..6]=output814, in[7]=out15, out=or2);
     Or(a=or1, b=or2, out=notzr);
     Not(in=notzr,out=shiftzr);

     Mux(a=shiftzr, b=ALUzr, sel=regularALU, out=zr);
     Mux(a=shiftng, b=ALUng, sel=regularALU, out=ng);
     

}
